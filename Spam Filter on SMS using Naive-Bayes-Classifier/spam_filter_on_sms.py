# -*- coding: utf-8 -*-
"""Spam_Filter_on_SMS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/126BvQHxH8sSN3NOIndW4T4VQeadwHRNf

## SMS Spam Filter Using Multinomial and Multivariate Naive Bayes Model

### 1. Importing and Preprocessing Data
"""

import pandas as pd
import numpy as np
from google.colab import files
from sklearn.model_selection  import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.naive_bayes import BernoulliNB
from sklearn.model_selection import cross_val_score
from sklearn import metrics
import seaborn as sns
import time
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc
from sklearn.model_selection import cross_validate as cvd
from sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score, f1_score

uploaded = files.upload()

# reading the training data
df = pd.read_table('SMSSpamCollection', header=None, names=['Class', 'sms'])
df.head()

# number of SMSes / documents
len(df)

# counting spam and ham instances
ham_spam = df.Class.value_counts()
ham_spam

print("spam rate is about {0}%".format(
    round((ham_spam[1]/float(ham_spam[0]+ham_spam[1]))*100), 2))

# mapping labels to 0 and 1
df['label'] = df.Class.map({'ham':0, 'spam':1})

df.head()

# we can now drop the column 'Class'
df = df.drop('Class', axis=1)
df.head()

# convert to X and y
X = df.sms
y = df.label
print(X.shape)
print(y.shape)

# splitting into test and train
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=28)

X_train.head()

y_train.head()

# vectorizing the sentences; removing stop words
vect = CountVectorizer(stop_words='english')

vect.fit(X_train)

# printing the vocabulary
vect.vocabulary_

# vocab size
len(vect.vocabulary_.keys())

# transforming the train and test datasets
X_train_transformed = vect.transform(X_train)
X_test_transformed = vect.transform(X_test)

# note that the type is transformed (sparse) matrix
print(type(X_train_transformed))
print(X_train_transformed)

"""### 2) Building and Cross-Validation of the Model for Multinomial NB"""

scoring = {'accuracy' : make_scorer(accuracy_score),
           'precision' : make_scorer(precision_score),
           'recall' : make_scorer(recall_score),
           'f1_score' : make_scorer(f1_score)}

"""2.1) 5-fold cross-validation results in terms of accuracy."""

# training the NB model and making predictions
start = time.time()
mnb = MultinomialNB()
#cross validtion
score1 = cross_val_score(mnb, X_train_transformed,y_train, cv=5, scoring='accuracy')
print("Average Cross Validation Accuracy for 5-Folds using Multinomial Naive Bayes:-",np.mean(score1))

"""2.2) 10-fold cross-validation results in terms of precision, recall,and F-score"""

score1 = cvd(mnb, X_train_transformed,y_train, cv=10, scoring=scoring)
print("Average Cross Validation precision for 10-Folds using Multinomial Naive Bayes:-",score1['test_precision'].mean())
print("Average Cross Validation recall for 10-Folds using Multinomial Naive Bayes:-",score1['test_recall'].mean())
print("Average Cross Validation F1 score for 10-Folds using Multinomial Naive Bayes:-",score1['test_f1_score'].mean())
end =time.time()
print("Time taken:-",end-start)

"""2.3) Training Multinomial NB Model"""

# fit
mnb.fit(X_train_transformed,y_train)

# predict class
y_pred_class1 = mnb.predict(X_test_transformed)

# predict probabilities
y_pred_proba1 = mnb.predict_proba(X_test_transformed)

#time taken for training and cross validation
end =time.time()
print("Time taken:-",end-start)

y_pred_proba1

"""2.4) Model Evaluation"""

# printing the overall accuracy
metrics.accuracy_score(y_test, y_pred_class1)

# confusion matrix
cm=metrics.confusion_matrix(y_test, y_pred_class1)
plt.figure(figsize = (10,7))
sns.heatmap(cm, annot=True)
TN = cm[0, 0]
FP = cm[0, 1]
FN = cm[1, 0]
TP = cm[1, 1]

sensitivity = TP / float(FN + TP)
print("sensitivity",sensitivity)
specificity = TN / float(TN + FP)
print("specificity",specificity)
precision = TP / float(TP + FP)
print("precision",precision)
print(metrics.precision_score(y_test, y_pred_class1))
print("precision",precision)
print("PRECISION SCORE :",metrics.precision_score(y_test, y_pred_class1))
print("RECALL SCORE :", metrics.recall_score(y_test, y_pred_class1))
print("F1 SCORE :",metrics.f1_score(y_test, y_pred_class1))

# creating an ROC curve
false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred_proba1[:,1])
roc_auc = auc(false_positive_rate, true_positive_rate)

# area under the curve
print (roc_auc)

# matrix of thresholds, tpr, fpr
pd.DataFrame({'Threshold': thresholds,
              'TPR': true_positive_rate,
              'FPR':false_positive_rate
             })

# Commented out IPython magic to ensure Python compatibility.
# plotting the ROC curve
# %matplotlib inline
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.title('ROC')
plt.plot(false_positive_rate, true_positive_rate)

input1 = ['Submit AI Assignment']
input1_transform = vect.transform(input1)
print(mnb.predict(input1_transform))

#input2 = ['Will pick you at 7pm']
input2 =['Free entry in 2 a wkly comp to win cricket wrld cup final']
input2_transform = vect.transform(input2)
print(mnb.predict(input2_transform))

"""###3) Building and Cross-Validation of the Model for Multivariate NB

3.1) 5-fold cross-validation results in terms of accuracy.
"""

start = time.time()
mvb=BernoulliNB()
#cross validtion
score2 = cross_val_score(mvb, X_train_transformed,y_train, cv=5, scoring='accuracy')
print("Average Cross Validation Accuracy for 5-Folds using Multivariate Naive Bayes:-",np.mean(score2))

"""3.2) 10-fold cross-validation results in terms of precision, recall,and F-score"""

score2 = cvd(mvb, X_train_transformed,y_train, cv=10, scoring=scoring)
print("Average Cross Validation precision for 10-Folds using Multivariate Naive Bayes:-",score2['test_precision'].mean())
print("Average Cross Validation recall for 10-Folds using Multivariate Naive Bayes:-",score2['test_recall'].mean())
print("Average Cross Validation F1 score for 10-Folds using Multivariate Naive Bayes:-",score2['test_f1_score'].mean())

"""3.3) Training Multivariate NB Model"""

# fit
mvb.fit(X_train_transformed,y_train)

# predict class
y_pred_class2 = mvb.predict(X_test_transformed)

# predict probabilities
y_pred_proba2 = mvb.predict_proba(X_test_transformed)

#time taken for training and cross validation
end =time.time()
print("Time taken:-",end-start)

"""3.4) Model Evaluation"""

# confusion matrix
cm=metrics.confusion_matrix(y_test, y_pred_class2)
plt.figure(figsize = (10,7))
sns.heatmap(cm, annot=True)
TN = cm[0, 0]
FP = cm[0, 1]
FN = cm[1, 0]
TP = cm[1, 1]

sensitivity = TP / float(FN + TP)
print("sensitivity",sensitivity)
specificity = TN / float(TN + FP)
print("specificity",specificity)
precision = TP / float(TP + FP)
print("precision",precision)
print(metrics.precision_score(y_test, y_pred_class1))
print("precision",precision)
print("PRECISION SCORE :",metrics.precision_score(y_test, y_pred_class1))
print("RECALL SCORE :", metrics.recall_score(y_test, y_pred_class1))
print("F1 SCORE :",metrics.f1_score(y_test, y_pred_class1))

# creating an ROC curve
false_positive_rate, true_positive_rate, thresholds = roc_curve(y_test, y_pred_proba2[:,1])
roc_auc = auc(false_positive_rate, true_positive_rate)

# area under the curve
print (roc_auc)

# matrix of thresholds, tpr, fpr
pd.DataFrame({'Threshold': thresholds,
              'TPR': true_positive_rate,
              'FPR':false_positive_rate
             })

# Commented out IPython magic to ensure Python compatibility.
# plotting the ROC curve
# %matplotlib inline
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.title('ROC')
plt.plot(false_positive_rate, true_positive_rate)

input1 = ['Submit AI Assignment']
input1_transform = vect.transform(input1)
print(mvb.predict(input1_transform))

#input2 = ['Will pick you at 7pm']
input2 =['Free entry in 2 a wkly comp to win cricket Cup final']
input2_transform = vect.transform(input2)
print(mvb.predict(input2_transform))